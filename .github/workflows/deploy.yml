name: deploy-oci
on:
  push:
    branches: [ main ]

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Deploy & restart on OCI
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.OCI_HOST }}
          username: ${{ secrets.OCI_USER }}
          key: ${{ secrets.OCI_SSH_KEY }}
          script: |
            set -euxo pipefail
            APP_DIR=/home/${{ secrets.OCI_USER }}/radio
            BRANCH=main

            sudo mkdir -p "$APP_DIR"
            sudo chown -R ${{ secrets.OCI_USER }}:${{ secrets.OCI_USER }} "$APP_DIR"

            # git: 항상 원격 최신으로 맞추기
            if [ ! -d "$APP_DIR/.git" ]; then
              git clone -b "$BRANCH" https://github.com/wowhapjs/automation.git "$APP_DIR"
            else
              cd "$APP_DIR"
              git fetch origin "$BRANCH"
              git checkout -f "$BRANCH"
              git reset --hard "origin/$BRANCH"
            fi

            # venv & deps
            cd "$APP_DIR"
            python3 -m venv .venv
            . .venv/bin/activate
            pip install -U pip wheel gunicorn
            # uvicorn 워커를 쓸 거면 함께 설치:
            # pip install uvicorn
            [ -f requirements.txt ] && pip install -r requirements.txt || true
            [ -f .env ] || [ ! -f .env.example ] || cp .env.example .env

            # systemd unit (경로 일치 + .env optional)
            sudo tee /etc/systemd/system/flaskapp.service > /dev/null <<'EOF'
            [Unit]
            Description=Flask app (gunicorn)
            After=network.target

            [Service]
            User=${{ secrets.OCI_USER }}
            WorkingDirectory=/home/${{ secrets.OCI_USER }}/radio
            EnvironmentFile=-/home/${{ secrets.OCI_USER }}/radio/.env
            ExecStart=/home/${{ secrets.OCI_USER }}/radio/.venv/bin/python -m gunicorn --chdir /home/${{ secrets.OCI_USER }}/radio -w 2 -b 127.0.0.1:8000 wsgi:app
            Restart=always

            [Install]
            WantedBy=multi-user.target
            EOF

            sudo systemctl daemon-reload
            sudo systemctl reset-failed flaskapp || true
            sudo systemctl enable flaskapp || true
            sudo systemctl restart flaskapp

            # nginx는 최초 1회만 필요(이미 되어 있으면 생략 가능)
            # sudo tee /etc/nginx/sites-available/flaskapp >/dev/null <<'NGINX'
            # server {
            #   listen 80 default_server;
            #   server_name _;
            #   location / {
            #     proxy_pass http://127.0.0.1:8000;
            #     proxy_set_header Host $host;
            #     proxy_set_header X-Real-IP $remote_addr;
            #     proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            #     proxy_set_header X-Forwarded-Proto $scheme;
            #   }
            # }
            # NGINX
            # sudo rm -f /etc/nginx/sites-enabled/default
            # sudo ln -sf /etc/nginx/sites-available/flaskapp /etc/nginx/sites-enabled/flaskapp
            # sudo nginx -t && sudo systemctl reload nginx
